1、开闭原则
    为了提高程序的可维护性和可复用性，增加软件的可扩展性和灵活性。   对扩展开放，对修改关闭。
2、里氏替换原则
    继承必须确保超类所拥有的性质在子类中仍然成立。 子类何以扩展父类的功能，但是不能改变父类原有的功能
        里氏替换原则的主要作用如下。
            1、里氏替换原则是实现开闭原则的重要方式之一。
            2、它克服了继承中重写父类造成的可复用性变差的缺点。
            3、它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。
            4、加强程序的健壮性，同时变更时可以做到非常好的兼容性，提高程序的维护性、可扩展性，降低需求变更时引入的风险。
        对里氏替换原则的定义可以总结如下：
            1、子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法
            2、子类中可以增加自己特有的方法
            3、当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松
            4、当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等
3、依赖倒置原则
    高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象（
    High level modules shouldnot depend upon low level modules.
    Both should depend upon abstractions.Abstractions should not depend upon details.
    Details should depend upon abstractions）。
    其核心思想是：要面向接口编程，不要面向实现编程
    依赖倒置原则的主要作用如下。
        1、依赖倒置原则可以降低类间的耦合性。
        2、依赖倒置原则可以提高系统的稳定性。
        3、依赖倒置原则可以减少并行开发引起的风险。
        4、依赖倒置原则可以提高代码的可读性和可维护性。
    依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。
        1、每个类尽量提供接口或抽象类，或者两者都具备。
        2、变量的声明类型尽量是接口或者是抽象类。
        3、任何类都不应该从具体类派生。
        4、使用继承时尽量遵循里氏替换原则。
4、单一职责原则
5、接口隔离原则
6、迪米特法则
7、合成复用原则
