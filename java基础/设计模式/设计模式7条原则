1、开闭原则
    为了提高程序的可维护性和可复用性，增加软件的可扩展性和灵活性。   对扩展开放，对修改关闭。
2、里氏替换原则
    继承必须确保超类所拥有的性质在子类中仍然成立。 子类何以扩展父类的功能，但是不能改变父类原有的功能
        里氏替换原则的主要作用如下。
            1、里氏替换原则是实现开闭原则的重要方式之一。
            2、它克服了继承中重写父类造成的可复用性变差的缺点。
            3、它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。
            4、加强程序的健壮性，同时变更时可以做到非常好的兼容性，提高程序的维护性、可扩展性，降低需求变更时引入的风险。
        对里氏替换原则的定义可以总结如下：
            1、子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法
            2、子类中可以增加自己特有的方法
            3、当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松
            4、当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等
3、依赖倒置原则
    高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象（
    High level modules shouldnot depend upon low level modules.
    Both should depend upon abstractions.Abstractions should not depend upon details.
    Details should depend upon abstractions）。
    其核心思想是：要面向接口编程，不要面向实现编程
    依赖倒置原则的主要作用如下。
        1、依赖倒置原则可以降低类间的耦合性。
        2、依赖倒置原则可以提高系统的稳定性。
        3、依赖倒置原则可以减少并行开发引起的风险。
        4、依赖倒置原则可以提高代码的可读性和可维护性。
    依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。
        1、每个类尽量提供接口或抽象类，或者两者都具备。
        2、变量的声明类型尽量是接口或者是抽象类。
        3、任何类都不应该从具体类派生。
        4、使用继承时尽量遵循里氏替换原则。
4、单一职责原则
    这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分
    （There should never be more than one reason for a class to change）
    单一职责原则的优点
        单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点。
            1、降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。
            2、提高类的可读性。复杂性降低，自然其可读性会提高。
            3、提高系统的可维护性。可读性提高，那自然更容易维护了。
            4、变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。
5、接口隔离原则
    客户端不应该被迫依赖于它不使用的方法
    该原则还有另外一个定义：一个类对另一个类的依赖应该建立在最小的接口上
    接口隔离原则的优点：
        接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点。
            1、将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。
            2、接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。
            3、如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。
            4、使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。
            5、能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。
6、迪米特法则
    只与朋友交谈，不与陌生人交谈（Talk only to your immediate friends and not to strangers）
    如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。
    迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则有以下有点：
        1、降低了类之间的耦合度。提高了模块间的独立性。
        2、由于亲和度降低，从而提高了类的复用性和系统的扩展性
7、合成复用原则
    它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现
    合成复用原则的重要性：
        通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点。
            1、继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。
            2、子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。
            3、它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。
        采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点
            1、它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。
            2、新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。
            3、复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。