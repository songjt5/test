1 List、Set、Map的区别
    List存储的数据是有序的，可重复的
    Set存储的数据是无序的，不可重复的
    Map: 使用键值对（key-value）存储，类似于数学上的函数 y=f(x)，“x”代表 key，"y"代表 value，Key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值
1.1 集合框架底层数据结构
    1.1.1 List
        Arraylist： Object[]数组
        Vector：Object[]数组
        LinkedList： 双向链表(JDK1.6 之前为循环链表，JDK1.7 取消了循环)
    1.1.2 Set
        HashSet（无序，唯一）: 基于 HashMap 实现的，底层采用 HashMap 来保存元素
        LinkedHashSet：LinkedHashSet 是 HashSet 的子类，并且其内部是通过 LinkedHashMap 来实现的。有点类似于我们之前说的 LinkedHashMap 其内部是基于 HashMap 实现一样，不过还是有一点点区别的
        TreeSet（有序，唯一）： 红黑树(自平衡的排序二叉树)
    1.1.3 Map
        HashMap： JDK1.8 之前 HashMap 由数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。
                  JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间
        LinkedHashMap： LinkedHashMap 继承自 HashMap，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，LinkedHashMap 在上面结构的基础上，
                    增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。详细可以查看：《LinkedHashMap 源码详细分析（JDK1.8）》
        Hashtable： 数组+链表组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的
        TreeMap： 红黑树（自平衡的排序二叉树）
    1.1.4 选择集合的标准
        主要根据集合的特点来选用，比如我们需要根据键值获取到元素值时就选用 Map 接口下的集合，需要排序时选择 TreeMap,不需要排序时就选择 HashMap,需要保证线程安全就选用 ConcurrentHashMap。
        当我们只需要存放元素值时，就选择实现Collection 接口的集合，需要保证元素唯一时选择实现 Set 接口的集合比如 TreeSet 或 HashSet，不需要就选择实现 List 接口的比如 ArrayList 或 LinkedList，然后再根据实现这些接口的集合的特点来选用。
    1.1.5 为什么要使用集合？

Arrays.asList()使用注意点
	1、Arrays.asList()的元素为对象，如果传入基本类型，那么整合数组就会被当成是一个对象，调用集合的add(),remove(),clear()会抛出异常
		如果需要传入基本类型可以传入基本类型的封装对象.
Collection.toArray()方法,如果toArray方法中没有传递任何参数的话返回的是Object类型数组
不要在foreach循环里面进行元素的remove/add操作	
	如果要进行remove操作，可以调用迭代器的 remove 方法而不是集合类的 remove 方法。
	因为如果列表在任何时间从结构上修改创建迭代器之后，以任何方式除非通过迭代器自身remove/add方法，
	迭代器都将抛出一个ConcurrentModificationException,这就是单线程状态下产生的 fail-fast 机制。
	