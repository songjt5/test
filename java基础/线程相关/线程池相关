创建线程及的五个参数及含义
	corePoolSize:核心线程数，最大同时允许执行的线程数量
	maxPoolSize:线程池允许存在的最大线程数量
	keepAliveTime:线程空闲时间，表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，
		即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，
		在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；
	allowCoreThreadTimeout:是否允许核心线程退出，默认是false
	queueCapacity:任务队列容量
	workQueue:一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响
		阻塞队列的选择：
			ArrayBlockingQueue:一个基于数组结构的有界阻塞队列。
			LinkedBlockingQueue：一个基于链表的阻塞队列，吞吐量要高于ArrayBlockingQueue。
			SynchronousQueue：一个不存储元素的阻塞队列。每次插入操作必须等到另外一个线程调用移除操作，否则一直处于阻塞状态。吞吐量要高于LinkedBlockingQueue。
			PriorityBlockingQueue：一个具有优先级的无线阻塞队列。
	threadFactory：线程工厂，主要用来创建线程
	RejectedExecutionHandler：当队列和线程池都满了，将会执行下面的策略，jdk1.5中提供有以下四种策略：
		ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。
		ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。
		ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）
		ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务
线程的五种状态：
	1、新建（NEW）：表示创建了一个线程对象
	2、就绪（Runable）：调用了对象的start方法。标识可运行，等待cpu调度
	3、运行（Running）：表示获得了cpu时间片，执行代码
	4、阻塞（blocked）：线程因为某种原因让出了cpu使用权，暂时停止运行。阻塞分为三种情况：
		1. 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。
		2. 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。
		3. 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。
			当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。
	5、死亡（dead）：线程退出run方法，生命周期结束	
线程池的原理	