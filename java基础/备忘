记一次navicate下连接oracle数据库
    navicate连接oracle需要安装一个压缩包，都需要去oracle官网下载 https://www.oracle.com/technetwork/topics/winx64soft-089540.html
    解压后修改 mysql OCI地址
    参考链接 https://blog.csdn.net/ha_123_qq/article/details/83826821?locationNum=6&fps=1
记一次navicate连接高版本mysql连接不上的方法
    ps：原因是mysql大于5.0版本之后的加密方式改变了，手动修改用户密码连接方式
    本地登入musql命令行
    1、运行修改加密方式  ALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER;
    2、修改密码         ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';
    3、最后比忘记刷新    FLUSH PRIVILEGES;
    原博客 https://www.cnblogs.com/shiysin/p/shiysin.html
记一次 easyexcel 动态生成表头 + 下拉框 生成
    参考：https://blog.csdn.net/m0_67402588/article/details/123482034
    核心代码 需要传对应列的行数和下拉的内容
    package com.customization.BusinessFilIdExcel.utils;

    import com.alibaba.excel.write.handler.SheetWriteHandler;
    import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
    import com.alibaba.excel.write.metadata.holder.WriteWorkbookHolder;
    import org.apache.poi.hssf.usermodel.HSSFDataValidation;
    import org.apache.poi.ss.usermodel.*;
    import org.apache.poi.ss.util.CellRangeAddressList;

    import java.util.List;
    import java.util.Map;

    public class SelectSheetWriteHandler implements SheetWriteHandler {

        private Map<Integer, List<String>> selectMap;

        private int index;

        private char[] alphabet = new char[]{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
                'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};

        public SelectSheetWriteHandler(Map<Integer, List<String>> selectMap) {
            this.selectMap = selectMap;
            this.index = 0;
        }

        @Override
        public void beforeSheetCreate(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder) {

        }

        @Override
        public void afterSheetCreate(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder) {
            if (selectMap == null || selectMap.size() == 0) {
                return;
            }
            // 需要设置下拉框的sheet页
            Sheet curSheet = writeSheetHolder.getSheet();
            DataValidationHelper helper = curSheet.getDataValidationHelper();
            String dictSheetName = "字典sheet";

            Workbook workbook = writeWorkbookHolder.getWorkbook();

            // 数据字典的sheet页
            Sheet dictSheet = workbook.createSheet(dictSheetName);
            // 从第二个工作簿开始隐藏，为了用户的友好性，将字典sheet隐藏掉
            this.index++;
            // 设置隐藏
            workbook.setSheetHidden(this.index, true);
            for (Map.Entry<Integer, List<String>> entry : selectMap.entrySet()) {
                // 设置下拉单元格的首行、末行、首列、末列
                CellRangeAddressList rangeAddressList = new CellRangeAddressList(1, 65533, entry.getKey(), entry.getKey());
                int rowLen = entry.getValue().size();
                // 设置字典sheet页的值 每一列一个字典项
                for (int i = 0; i < rowLen; i++) {
                    Row row = dictSheet.getRow(i);
                    if (row == null) {
                        row = dictSheet.createRow(i);
                    }
                    row.createCell(entry.getKey()).setCellValue(entry.getValue().get(i));
                }
                String excelColumn = getExcelColumn(entry.getKey());
                // 下拉框数据来源 eg:字典sheet!$B1:$B2
                String refers = dictSheetName + "!$" + excelColumn + "$1:$" + excelColumn + "$" + rowLen;
                // 创建可被其他单元格引用的名称
                Name name = workbook.createName();
                // 设置名称的名字
                name.setNameName("dict" + entry.getKey());
                // 设置公式
                name.setRefersToFormula(refers);
                // 设置引用约束
                DataValidationConstraint constraint = helper.createFormulaListConstraint("dict" + entry.getKey());
                // 设置约束
                DataValidation validation = helper.createValidation(constraint, rangeAddressList);
                if (validation instanceof HSSFDataValidation) {
                    validation.setSuppressDropDownArrow(false);
                } else {
                    validation.setSuppressDropDownArrow(true);
                    validation.setShowErrorBox(true);
                }
                // 阻止输入非下拉框的值
                validation.setErrorStyle(DataValidation.ErrorStyle.STOP);
                validation.createErrorBox("提示", "此值与单元格定义格式不一致！");
                // 添加下拉框约束
                writeSheetHolder.getSheet().addValidationData(validation);
            }

        }

        /**
         * 将数字列转化成为字母列
         *
         * @param num
         * @return
         */
        private String getExcelColumn(int num) {
            String column = "";
            int len = alphabet.length - 1;
            int first = num / len;
            int second = num % len;
            if (num <= len) {
                column = alphabet[num] + "";
            } else {
                column = alphabet[first - 1] + "";
                if (second == 0) {
                    column = column + alphabet[len] + "";
                } else {
                    column = column + alphabet[second - 1] + "";
                }
            }
            return column;

        }

    }
